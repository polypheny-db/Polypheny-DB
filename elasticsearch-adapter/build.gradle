group "org.polypheny"


version = versionMajor + "." + versionMinor + versionQualifier


apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"


compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"


sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    implementation project(":core")

    implementation group: "org.elasticsearch.client", name: "elasticsearch-rest-client", version: elasticsearch_rest_client_version  // Apache 2.0
    implementation group: "org.apache.httpcomponents", name: "httpcore", version: httpcore_version  // Apache 2.0
    implementation group: "org.apache.httpcomponents", name: "httpclient", version: httpclient_version  // Apache 2.0


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "testClasses")

    testImplementation group: "junit", name: "junit", version: junit_version
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause

    testImplementation group: "org.elasticsearch", name: "elasticsearch", version: elasticsearch_version  // Apache 2.0
    testImplementation group: "org.elasticsearch.plugin", name: "transport-netty4-client", version: transport_netty4_client_version  // Apache 2.0
    testImplementation group: "org.codelibs.elasticsearch.module", name: "lang-painless", version: lang_painless_version  // Apache 2.0
    //testCompile group: "org.apache.logging.log4j", name: "log4j-api", version: log4j_api_version
    //testCompile group: "org.apache.logging.log4j", name: "log4j-core", version: log4j_core_version
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



/**
 * Tests
 */
test {
    include "**/*Test.class"
}



/**
 * JavaDoc
 */
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}