import ca.coglinc.gradle.plugins.javacc.*

group 'ch.unibas.dmi.dbis.polyphenydb'

def versionMajor = 1
def versionMinor = 0
def versionQualifier = 'SNAPSHOT'
version = versionMajor + '.' + versionMinor + '-' + versionQualifier


def lombokVersion = '1.16.18'


configurations {
    javacc
    testClasses
}


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // JavaCC (https://github.com/johnmartel/javaccPlugin)
        classpath group: 'ca.coglinc2.javacc', name: 'ca.coglinc2.javacc.gradle.plugin', version: '3.0.0'
        // Fmpp
        classpath group: 'net.sourceforge.fmpp', name: 'fmpp', version: '0.9.16'
        // Lombok (https://github.com/franzbecker/gradle-lombok)
        classpath group: 'io.franzbecker', name: 'gradle-lombok', version: '1.14'
    }
    ant.taskdef(name: 'fmpp', classname:'fmpp.tools.AntTask', classpath: buildscript.configurations.classpath.asPath)
}


repositories {
    mavenCentral()
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.franzbecker.gradle-lombok'


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}



dependencies {
    javacc group: 'net.java.dev.javacc', name: 'javacc', version: '4.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    
    compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version:'2.5.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.8'

    compile group: 'com.esri.geometry', name: 'esri-geometry-api', version:'2.2.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version:'2.9.6'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version:'3.0.1'
    compile group: 'com.yahoo.datasketches', name: 'sketches-core', version:'0.9.0'
    compile(group: 'com.jayway.jsonpath', name: 'json-path', version:'2.4.0') { exclude(module: 'json-smart') }
    compile group: 'net.hydromatic', name: 'aggdesigner-algorithm', version:'6.0'
    compile group: 'org.codehaus.janino', name: 'janino', version:'3.0.11'
    compile group: 'org.codehaus.janino', name: 'commons-compiler', version:'3.0.11'

    compile group: 'org.apache.calcite', name: 'calcite-linq4j', version: '1.18.0'
    compile group: 'org.apache.calcite.avatica', name: 'avatica-core', version:'1.13.0'


    // --- Test Compile ---
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile group: 'org.apache.calcite', name: 'calcite-linq4j', version: '1.18.0'
    testCompile group: 'org.apache.calcite.avatica', name: 'avatica-server', version:'1.13.0'

    testCompile group: 'org.apache.commons', name: 'commons-pool2', version:'2.6.0'
    testCompile group: 'com.h2database', name: 'h2', version:'1.4.197'
    testCompile group: 'mysql', name: 'mysql-connector-java', version:'5.1.20'
    testCompile group: 'org.hsqldb', name: 'hsqldb', version:'2.4.1'
    testCompile group: 'org.postgresql', name: 'postgresql', version:'9.3-1102-jdbc41'

    testCompile group: 'net.hydromatic', name: 'foodmart-data-hsqldb', version:'0.3'
    testCompile group: 'net.hydromatic', name: 'foodmart-queries', version:'0.4.1'
    testCompile group: 'net.hydromatic', name: 'quidem', version:'0.9'
    testCompile group: 'net.hydromatic', name: 'scott-data-hsqldb', version:'0.1'

    testCompile group: 'org.incava', name: 'java-diff', version:'1.1.2'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version:'1.3'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.25'
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java","build/generated-test-sources"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



lombok {
    // https://projectlombok.org/
    version = lombokVersion
    sha256 = "" // skip verifyLombok task
}



/**
 * Compile Pipline
 */
task generateFmppSources {
    inputs.dir('src/main/codegen/templates')
    outputs.dir(project.buildDir.absolutePath + '/generated-sources/fmpp')
    doLast {
        ant.fmpp(configuration: 'src/main/codegen/config.fmpp',
                sourceRoot: 'src/main/codegen/templates',
                outputRoot: project.buildDir.absolutePath + '/generated-sources/fmpp')
    }
}
task generateParser (type: CompileJavaccTask) {
    dependsOn("generateFmppSources")
    getConventionMapping().map("classpath", { configurations.javacc })
	arguments = [static: 'false', lookahead: '2']
    inputDirectory = file(project.buildDir.absolutePath + '/generated-sources/fmpp/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated-sources/ch/unibas/dmi/dbis/polyphenydb/sql/parser/impl')
}
task generateJdbcVersionProperties(type: Copy) {
    from 'src/main/resources/version'
    into project.buildDir.absolutePath + '/classes'
    expand(version: project.version, versionMajor: versionMajor, versionMinor: versionMinor, buildTimestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}
compileJava {
    dependsOn("generateParser", "generateJdbcVersionProperties")
}



/**
 * Compile Test Pipline
 */
task generateTestFmppSources {
    inputs.dir('src/main/codegen/templates')
    outputs.dir(project.buildDir.absolutePath + '/generated-test-sources/fmpp')
    doLast {
        ant.fmpp(configuration: 'src/test/codegen/config.fmpp',
                sourceRoot: 'src/main/codegen/templates',
                outputRoot: project.buildDir.absolutePath + '/generated-test-sources/fmpp')
    }
}
task generateTestParser (type: CompileJavaccTask) {
    dependsOn("generateTestFmppSources")
    getConventionMapping().map("classpath", { configurations.javacc })
	arguments = [grammar_encoding: 'UTF-8', static: 'false', lookahead: '2']
    inputDirectory = file(project.buildDir.absolutePath + '/generated-test-sources/fmpp/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated-test-sources/ch/unibas/dmi/dbis/polyphenydb/sql/parser/parserextensiontesting')
}
compileTestJava {
    dependsOn("generateTestParser")
}



/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption('Xdoclint:none', '-quiet')
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}



/**
 * Tests
 */
test {
    include '**/PolyphenyDbSuite.class'
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}
task testJar (type: Jar) {
    from sourceSets.test.output
    classifier = 'test'
}
artifacts {
    archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    testClasses testJar
}




/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")

        generatedSourceDirs += file("${project.buildDir}/generated-sources")
        generatedSourceDirs += file("${project.buildDir}/generated-test-sources")
    }
}


