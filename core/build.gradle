import ca.coglinc.gradle.plugins.javacc.CompileJavaccTask

group "org.polypheny"

version = versionMajor + "." + versionMinor + versionQualifier


configurations {
    javacc
    testClasses
}


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // JavaCC (https://github.com/johnmartel/javaccPlugin)
        classpath group: "ca.coglinc2.javacc", name: "ca.coglinc2.javacc.gradle.plugin", version: "3.0.0"
        // Fmpp
        classpath group: "net.sourceforge.fmpp", name: "fmpp", version: "0.9.16"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: lombok_version
    }
    ant.taskdef(name: "fmpp", classname:"fmpp.tools.AntTask", classpath: buildscript.configurations.classpath.asPath)
}


repositories {
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    mavenCentral()
}


apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"


compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    api project(":config")
    api project(":information")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version

    api group: "org.slf4j", name: "slf4j-api", version: slf4j_api_version
    
    api group: "com.google.guava", name: "guava", version: guava_version
    api group: "org.apache.commons", name: "commons-dbcp2", version: commons_dbcp2_version
    api group: "org.apache.commons", name: "commons-lang3", version: commons_lang3_version
    implementation group: 'commons-codec', name: 'commons-codec', version: commons_codec_version

    implementation group: "com.esri.geometry", name: "esri-geometry-api", version: esri_geometry_api_version
    api group: "com.fasterxml.jackson.core", name: "jackson-core", version: jackson_core_version
    api group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: jackson_annotations_version
    api group: "com.fasterxml.jackson.core", name: "jackson-databind", version: jackson_databind_version
    api group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-yaml", version: jackson_dataformat_yaml_version
    api group: "com.google.code.findbugs", name: "jsr305", version: jsr305_version
    implementation group: "com.yahoo.datasketches", name: "sketches-core", version: sketches_core_version
    implementation(group: "com.jayway.jsonpath", name: "json-path", version: json_path_version) { exclude(module: "json-smart") }
    api group: "net.hydromatic", name: "aggdesigner-algorithm", version: aggdesigner_algorithm_version
    implementation group: "org.codehaus.janino", name: "janino", version: janino_version
    implementation group: "org.codehaus.janino", name: "commons-compiler", version: commons_compiler_version

    api group: "org.apache.calcite", name: "calcite-linq4j", version: calcite_linq4j_version
    api group: "org.apache.calcite.avatica", name: "avatica-core", version: avatica_core_version
    

    // --- Test Compile ---
    testCompile group: "junit", name: "junit", version: junit_version

    testCompile group: "org.apache.calcite", name: "calcite-linq4j", version: calcite_linq4j_version
    testCompile group: "org.apache.calcite.avatica", name: "avatica-server", version: avatica_server_version

    testCompile group: "org.apache.commons", name: "commons-pool2", version: commons_pool2_version
    testCompile group: "com.h2database", name: "h2", version: h2_version
    testCompile group: "mysql", name: "mysql-connector-java", version: mysql_connector_java_version
    testCompile group: "org.hsqldb", name: "hsqldb", version: hsqldb_version
    testCompile group: "org.postgresql", name: "postgresql", version: postgresql_version

    testCompile group: "org.incava", name: "java-diff", version: java_diff_version
    testCompile group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            // We need the main resources for the tests as well.
            // TODO(jan): Investigate further why this is required
            srcDirs = ["src/test/resources", "src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



/**
 * Compile Pipline
 */
task generateFmppSources {
    inputs.dir("src/main/codegen/templates")
    outputs.dir(project.buildDir.absolutePath + "/generated-sources/fmpp")
    doLast {
        ant.fmpp(configuration: "src/main/codegen/config.fmpp",
                sourceRoot: "src/main/codegen/templates",
                outputRoot: project.buildDir.absolutePath + "/generated-sources/fmpp")
    }
}
task generateParser (type: CompileJavaccTask) {
    dependsOn("generateFmppSources")
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false", lookahead: "2"]
    inputDirectory = file(project.buildDir.absolutePath + "/generated-sources/fmpp/javacc")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/org/polypheny/db/sql/parser/impl")
}
task generateJdbcVersionProperties(type: Copy) {
    from "src/main/resources/version"
    into project.buildDir.absolutePath + "/classes"
    expand(version: project.version, versionMajor: versionMajor, versionMinor: versionMinor, buildTimestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}
compileJava {
    dependsOn("generateParser", "generateJdbcVersionProperties")
}



/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // Exclude build dir
    exclude "fmpp/javacc/**"
}



/**
 * Tests
 */
test {
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
task testJar (type: Jar) {
    from sourceSets.test.output
    classifier = "test"
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    testClasses testJar // jar file containing the test classes
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")

        generatedSourceDirs += file("${project.buildDir}/generated-sources")
        generatedSourceDirs += file("${project.buildDir}/generated-test-sources")
    }
}


