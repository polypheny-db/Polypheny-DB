/*
 * This file is based on code taken from the Apache Calcite project, which was released under the Apache License.
 * The changes are released under the MIT license.
 *
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Databases and Information Systems Research Group, University of Basel, Switzerland
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package ch.unibas.dmi.dbis.polyphenydb.model;


import ch.unibas.dmi.dbis.polyphenydb.sql.Lex;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.util.ArrayList;
import java.util.List;


/**
 * Schema schema element.
 *
 * Occurs within {@link JsonRoot#schemas}.
 *
 * @see JsonRoot Description of schema elements
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        property = "type",
        defaultImpl = JsonMapSchema.class)
@JsonSubTypes({
        @JsonSubTypes.Type(value = JsonMapSchema.class, name = "map"),
        @JsonSubTypes.Type(value = JsonJdbcSchema.class, name = "jdbc"),
        @JsonSubTypes.Type(value = JsonCustomSchema.class, name = "custom") })
public abstract class JsonSchema {

    /**
     * Name of the schema.
     *
     * Required.
     *
     * @see JsonRoot#defaultSchema
     */
    public String name;

    /**
     * SQL path that is used to resolve functions used in this schema.
     *
     * May be null, or a list, each element of which is a string or a string-list.
     *
     * For example,
     *
     * <blockquote><pre>path: [ ['usr', 'lib'], 'lib' ]</pre></blockquote>
     *
     * declares a path with two elements: the schema '/usr/lib' and the schema '/lib'. Most schemas are at the top level, and for these you can use a string.
     */
    public List<Object> path;

    /**
     * List of tables in this schema that are materializations of queries.
     *
     * The list may be empty.
     */
    public final List<JsonMaterialization> materializations = new ArrayList<>();

    public final List<JsonLattice> lattices = new ArrayList<>();

    /**
     * Whether to cache metadata (tables, functions and sub-schemas) generated by this schema. Default value is {@code true}.
     *
     * If {@code false}, Polypheny-DB will go back to the schema each time it needs metadata, for example, each time it needs a list of tables in order to validate a query against the schema.
     *
     * If {@code true}, Polypheny-DB will cache the metadata the first time it reads it. This can lead to better performance, especially if name-matching is case-insensitive (see {@link Lex#caseSensitive}).
     *
     * Tables, functions and sub-schemas explicitly created in a schema are not affected by this caching mechanism. They always appear in the schema immediately, and are never flushed.
     */
    public Boolean cache;

    /**
     * Whether to create lattices in this schema based on queries occurring in other schemas. Default value is {@code false}.
     */
    public Boolean autoLattice;


    public abstract void accept( ModelHandler handler );


    public void visitChildren( ModelHandler modelHandler ) {
        for ( JsonLattice jsonLattice : lattices ) {
            jsonLattice.accept( modelHandler );
        }
        for ( JsonMaterialization jsonMaterialization : materializations ) {
            jsonMaterialization.accept( modelHandler );
        }
    }


    /**
     * Built-in schema types.
     */
    public enum Type {
        MAP,
        JDBC,
        CUSTOM
    }
}

