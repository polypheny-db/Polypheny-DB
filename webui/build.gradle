
group "org.polypheny"

version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "3.6.6"
    }
}


repositories {
    mavenLocal()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    mavenCentral()
    jcenter()
}


apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


configurations {
   uiFiles { transitive = false } 
} 


dependencies {
    implementation project(":core")
    api project(":statistic")

    uiFiles group: "org.polypheny", name: "polypheny-ui", version: polypheny_ui_version

    implementation group: "com.sparkjava", name: "spark-core", version: spark_core_version


    compile group: "com.squareup.okhttp3", name: "okhttp", version: okhttp_version

    compile group: 'com.mashape.unirest', name: 'unirest-java', version: unirest_version

    compile group: "net.sf.opencsv", name: "opencsv", version: opencsv_version


    // --- Test Compile ---
    testCompile project(path: ":core", configuration: "testClasses")

    testCompile group: "junit", name: "junit", version: junit_version
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources","$buildDir/webapp"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



// unzip ui files
task unzipUiFIles(type: Copy) {
   from zipTree(configurations.uiFiles.singleFile)
   into "$buildDir/webapp"
   doLast {
       file("$buildDir/webapp/index").mkdirs()
       ant.move file: "$buildDir/webapp/webapp/index.html",
                toDir: "$buildDir/webapp/index/"
    }
}

classes.dependsOn(unzipUiFIles)



/**
 * JavaDoc
 */
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
    from("$buildDir/webapp") // include webapp files
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}