group "org.polypheny"

version = versionMajor + "." + versionMinor + versionQualifier


apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"


compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"


sourceCompatibility = 1.8
targetCompatibility = 1.8


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


configurations {
    uiFiles { transitive = false }
}


dependencies {
    implementation project(":core")
    implementation project(":statistic")
    implementation project(":explore-by-example")

    implementation group: "commons-io", name: "commons-io", version: commons_io_version  // Apache 2.0

    uiFiles group: "org.polypheny", name: "polypheny-ui", version: polypheny_ui_version

    implementation group: "com.sparkjava", name: "spark-core", version: spark_core_version  // Apache 2.0

    implementation group: "com.squareup.okhttp3", name: "okhttp", version: okhttp_version  // Apache 2.0

    implementation group: 'com.konghq', name: 'unirest-java', version: unirest_version  // MIT

    implementation group: "net.sf.opencsv", name: "opencsv", version: opencsv_version  // Apache 2.0

    implementation group: 'com.j256.simplemagic', name: 'simplemagic', version: simplemagic_version // ISC


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "testClasses")

    testImplementation group: "junit", name: "junit", version: junit_version
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources", "$buildDir/webapp"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


// unzip ui files
task unzipUiFiles(type: Copy) {
    from zipTree(configurations.uiFiles.singleFile)
    into "$buildDir/webapp"
    doLast {
        file("$buildDir/webapp/index").mkdirs()
        ant.move file: "$buildDir/webapp/webapp/index.html",
                toDir: "$buildDir/webapp/index/"
    }
}

classes.dependsOn(unzipUiFiles)


/**
 * JavaDoc
 */
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
    from("$buildDir/webapp") // include webapp files
}
java {
    withJavadocJar()
    withSourcesJar()
}


/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}