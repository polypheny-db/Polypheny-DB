import ca.coglinc.gradle.plugins.javacc.*

group 'ch.unibas.dmi.dbis.polyphenydb'


version = versionMajor + '.' + versionMinor + versionQualifier


configurations {
    javacc
}


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // JavaCC (https://github.com/johnmartel/javaccPlugin)
        classpath group: 'ca.coglinc2.javacc', name: 'ca.coglinc2.javacc.gradle.plugin', version: '3.0.0'
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "3.6.6"
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
//        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "5.0.0"
    }
}


repositories {
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    mavenCentral()
}


apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: "io.freefair.lombok"
//apply plugin: "com.github.johnrengelman.shadow"


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    // Javacc
    javacc group: 'net.java.dev.javacc', name: 'javacc', version: javacc_version

    implementation project(':core')

//    implementation group: 'org.apache.calcite', name: 'calcite-linq4j', version: calcite_linq4j_version

//    implementation group: 'com.google.guava', name: 'guava', version: guava_version



    // --- Test Compile ---
    testCompile project(path: ':core', configuration: 'testClasses')

    testCompile group: 'junit', name: 'junit', version: junit_version

    testCompile group: 'net.hydromatic', name: 'scott-data-hsqldb', version: scott_data_hsqldb_version
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: hamcrest_core_version
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: hsqldb_version
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



/**
 * Compile Pipline
 */
task generateParser (type: CompileJavaccTask) {
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: 'false', lookahead: '2']
    inputDirectory = file('src/main/codegen/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated-sources/ch/unibas/dmi/dbis/polyphenydb/piglet/parser')
}
compileJava {
    dependsOn("generateParser")
}



/**
 * JavaDoc
 */
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    // suppress most of the warnings
    options.addStringOption('Xdoclint:none', '-quiet')
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
}



/**
 * Tests
 */
test {
    include '**/PigletTest.class'
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}
//shadowJar {
//    classifier = ""
//}
//assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
//    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}